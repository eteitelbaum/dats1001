---
title: Data Viz Best Practices
subtitle: Make Your Visualizations Accessible
date: today
date-format: long
footer: "[DATS 1001 Website](https://ds4all.rocks)"
logo: images/ds4all-logo.png
format:
  revealjs:
    theme: [simple, custom.scss]
    transition: fade
    slide-number: true
    #multiplex: true
    chalkboard: true
execute:
  message: false
  warning: false
  freeze: auto
---

## Line Chart from Last Class

```{r}
#| label: geom_line1

# load data
dem_waves_ctrs <- read_csv("data/dem_waves_ctrs.csv")

# in this ggplot() call, we add a third dimension for line color
ggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +
  geom_line(linewidth = 1) + # our geom is a line with a width of 1
  labs(
    x = "Year", 
    y = "Polyarchy Score", 
    title = 'Democracy in countries representing three different "waves"', 
    caption = "Source: V-Dem Institute", 
    color = "Country" # make title of legend to upper case
  )
```

## Problem

```{r}
#| label: cvd_plot

library(colorBlindness)

cvdPlot(dem_waves_chart)
```

## Color Blindness

<br>

- Color Vision Deficiency (CVD) or color blindness affects 8 percent of men and 1 in 200 women
- There are different types of CVD but most common is red-green color blindness
- Therefore, don't include red and green in the same chart! 
- Look for color blind safe palettes

## 

**Solution:** Use a colorblind safe color scheme like `viridis`...

```{r}
#| label: geom_line6

# in this ggplot() call, we add a third dimension for line color
dem_waves_viridis <- ggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +
  geom_line(linewidth = 1) + # our geom is a line with a width of 1
  labs(
    x = "Year", 
    y = "Polyarchy Score", 
    title = 'Democracy in countries representing three different "waves"', 
    caption = "Source: V-Dem Institute", 
    color = "Country" # make title of legend to upper case
  ) +
  scale_color_viridis_d(option = "mako", end = .8) # use viridis color palette

dem_waves_viridis
```

##

<br>

Use `scale_color_viridis_d()` in this case to specify the viridis color scheme...

```{r}
#| label: geom_line7
#| echo: true
#| eval: false
#| code-line-numbers: "11"

# in this ggplot() call, we add a third dimension for line color
ggplot(dem_waves_ctrs, aes(x = year, y = polyarchy, color = country)) +
  geom_line(linewidth = 1) + # our geom is a line with a width of 1
  labs(
    x = "Year", 
    y = "Polyarchy Score", 
    title = 'Democracy in countries representing three different "waves"', 
    caption = "Source: V-Dem Institute", 
    color = "Country" # make title of legend to upper case
  ) +
  scale_color_viridis_d(option = "mako", end = .8) # use viridis color palette
```

## Better!

```{r}
#| label: cvdplot2

cvdPlot(dem_waves_viridis)
```

## Palettes

<br>

- There are a number of viridis palettes
- See [this reference](https://search.r-project.org/CRAN/refmans/viridisLite/html/viridis.html) to view different palettes and options
- You can also use `scale_color_viridis_c()` to specify a continuous color scale 
- Also check out the [paletteer package](https://emilhvitfeldt.github.io/paletteer/) for easy access to many more palettes

## Your Turn!

<br>

- Use `scale_color_viridis_d()` to specify a viridis color scheme

```{r}
#| label: timer1
countdown::countdown(minutes = 10, 
                     id = "timer1", 
                     bottom = "10%", 
                     right = "10%",
                     color_border = "#fff",
                     color_text = "#fff",
                     color_running_background = "#42affa",
                     color_running_text = "black",
                     color_finished_background = "#E5D19D",
                     color_finished_text = "#00264A")
```

## Scatter Plot Example

```{r}
#| label: scatter_plot_setup
#| output: false

dem_summary_ctry <- read_csv("data/dem_women.csv") |>
  group_by(country, region) |> # group by country, keep region
  summarize(
    polyarchy = mean(polyarchy, na.rm = TRUE),
    gdp_pc = mean(gdp_pc, na.rm = TRUE), 
    flfp = mean(flfp, na.rm = TRUE), 
    women_rep = mean(women_rep, na.rm = TRUE)
  )
```


```{r}
#| label: scatter1

# load data
dem_summary_ctry <- read_csv("data/dem_summary_ctry.csv")

# create scatter plot
ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy, color = region, size = women_rep)) + 
  geom_point() + # use geom_point() for scatter plots
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute", 
    color = "Region",
    size = "Women Reps"
    ) 
```

## Scatter Plot Example 

```{r}
#| label: scatter2

ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy, color = region, size = women_rep)) + 
  geom_point() + # use geom_point() for scatter plots
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute", 
    color = "Region",
    size = "Women Reps"
    ) +
  scale_color_viridis_d(option = "inferno", end = .8)
```

## Scatter Plot Example 

```{r}
#| label: scatter3
#| echo: true
#| eval: false
#| code-line-numbers: "12"

ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy, color = region, size = women_rep)) + 
  geom_point() + # use geom_point() for scatter plots
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute", 
    color = "Region",
    size = "Women Reps"
    ) +
  scale_color_viridis_d(option = "inferno", end = .8)
```

## Facet Wrapping

```{r}
#| label: facet_wrap0

ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy)) + 
  geom_point() + 
  geom_smooth(method = "lm", linewidth = 1) + 
  facet_wrap(~ region) +
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

## Facet Wrapping

<br>

Use `facet_wrap()` with `~` before variable you want to wrap on...

```{r}
#| label: facet_wrap1
#| echo: true
#| eval: false
#| code-line-numbers: "4"
ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy)) + 
  geom_point() + 
  geom_smooth(method = "lm", linewidth = 1) + 
  facet_wrap(~ region) +
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

## Facet Wrapping

<br>

What else changes? Back down to two dimensions...

```{r}
#| label: facet_wrap2
#| echo: true
#| eval: false
#| code-line-numbers: "1-2"
ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy)) + 
  geom_point() + 
  geom_smooth(method = "lm", linewidth = 1) + 
  facet_wrap(~ region) +
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

## Facet Wrapping

<br>

Don't forget to take the legend title out of the captions...

```{r}
#| label: facet_wrap3
#| echo: true
#| eval: false
#| code-line-numbers: "6-11"
ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy)) + 
  geom_point() + 
  geom_smooth(method = "lm", linewidth = 1) + 
  facet_wrap(~ region) +
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

## Your Turn!

<br>

- Facet wrap your scatter plot
- Use `scales = "free"` in `facet_wrap` call to fix the West
  - `facet_wrap(~ region, scales = "free")`

```{r}
#|label: facet_wrap_time
countdown::countdown(minutes = 5, 
                     id = "facet", 
                     bottom = "10%", 
                     right = "10%")
```

## Labeling Points

```{r}
#| label: geom_text1
dem_summary_ctry |> 
  filter(region == "Asia") |>
  ggplot(aes(x = gdp_pc, y = polyarchy)) + 
    geom_point() + 
    geom_text(aes(label = country), size = 2, vjust = 2) +
    geom_smooth(method = "lm", linewidth = 1) +
    scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
      labs(
        x= "GDP Per Capita", 
        y = "Polyarchy Score",
        title = "Wealth and democracy in Asia, 1990 - present", 
        caption = "Source: V-Dem Institute"
        )
```

## Labeling Points

<br>

Filter for Asia, add labels with `geom_text()`...

```{r}
#| label: geom_text2
#| echo: true
#| eval: false
#| code-line-numbers: "1-5"
dem_summary_ctry |> 
  filter(region == "Asia") |>
  ggplot(aes(x = gdp_pc, y = polyarchy)) + 
    geom_point() + 
    geom_text(aes(label = country), size = 2, vjust = 2) +
    geom_smooth(method = "lm", linewidth = 1) +
    scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
      labs(
        x= "GDP Per Capita", 
        y = "Polyarchy Score",
        title = "Wealth and democracy in Asia, 1990 - present", 
        caption = "Source: V-Dem Institute"
        )
```

## Your Turn!

<br>

- Filter for Asia or another region
- Use `geom_text()` to add labels to your points
- Play with `size` and `vjust` paramters 

```{r}
#|label: label_time
countdown::countdown(minutes = 5, 
                     id = "labels", 
                     bottom = "10%", 
                     right = "10%")
```

## Make it Interactive

```{r}
#| label: plotly1

library(plotly)

modernization_plot <- ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy)) + 
  geom_point(aes(color = region)) + 
  aes(label = country) +
  geom_smooth(method = "lm", linewidth = 1) + 
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute", 
    color = "Region"
    ) +
  scale_color_viridis_d(option = "inferno", end = .8)

ggplotly(modernization_plot, tooltip = c("country", "gdp_pc", "polyarchy"))
```

##

<br>

Use `plotly` to make any plot interactive...

```{r}
#| label: plotly2
#| echo: true
#| eval: false
#| code-line-numbers: "|1|3|5|17"
library(plotly)

modernization_plot <- ggplot(dem_summary_ctry, aes(x = gdp_pc, y = polyarchy)) + 
  geom_point(aes(color = region)) + 
  aes(label = country) +
  geom_smooth(method = "lm", linewidth = 1) + 
  scale_x_log10(labels = scales::label_number(prefix = "$", suffix = "k")) +
  labs(
    x= "GDP per Capita", 
    y = "Polyarchy Score",
    title = "Wealth and democracy, 1990 - present", 
    caption = "Source: V-Dem Institute", 
    color = "Region"
    ) +
  scale_color_viridis_d(option = "inferno", end = .8)

ggplotly(modernization_plot, tooltip = c("country", "gdp_pc", "polyarchy"))
```



